version: "3.9"
services:
  backend:
    build:
      context: .
      dockerfile: backend.Dockerfile
    container_name: backend
    depends_on:
      - cache
    deploy:
      mode: replicated
      replicas: ${backend.workload.replicas}
      resources:
        limits:
          cpus: ${backend.workload.max-cpu}
          memory: ${backend.workload.max-memory}
        reservations:
          cpus: ${backend.workload.cpu}
          memory: ${backend.workload.memory}
      update_config:
        parallelism: ${backend.workload.rolling-update-max-surge}
    environment:
      CACHE_ENDPOINT: ${backend.environment.CACHE_ENDPOINT}
    healthcheck:
      disable: ${backend.workload.liveness-probe-disable}
      interval: ${backend.workload.liveness-probe-interval}
      retries: ${backend.workload.liveness-probe-retries}
      start_period: ${backend.workload.liveness-probe-initial-delay}
      test: ${backend.workload.liveness-probe-command}
      timeout: ${backend.workload.liveness-probe-timeout}
    image: ezodude/backend-cok8s:dev
    networks:
      dev-esnet: null
    ports:
      - mode: ingress
        protocol: tcp
        published: 8008
        target: 8080
  cache:
    container_name: cache
    deploy:
      mode: replicated
      replicas: ${cache.workload.replicas}
      resources:
        limits:
          cpus: ${cache.workload.max-cpu}
          memory: ${cache.workload.max-memory}
        reservations:
          cpus: ${cache.workload.cpu}
          memory: ${cache.workload.memory}
      update_config:
        parallelism: ${cache.workload.rolling-update-max-surge}
    healthcheck:
      disable: ${cache.workload.liveness-probe-disable}
      interval: ${cache.workload.liveness-probe-interval}
      retries: ${cache.workload.liveness-probe-retries}
      start_period: ${cache.workload.liveness-probe-initial-delay}
      test: ${cache.workload.liveness-probe-command}
      timeout: ${cache.workload.liveness-probe-timeout}
    image: docker.io/bitnami/redis:6.0-debian-10
    networks:
      dev-esnet: null
    ports:
      - mode: ingress
        protocol: tcp
        published: 6379
        target: 6379
    volumes:
      - source: redis_data
        target: /bitnami/redis/data
        type: volume
  frontend:
    build:
      context: .
      dockerfile: frontend.Dockerfile
    container_name: frontend
    depends_on:
      - backend
    deploy:
      mode: replicated
      replicas: ${frontend.workload.replicas}
      resources:
        limits:
          cpus: ${frontend.workload.max-cpu}
          memory: ${frontend.workload.max-memory}
        reservations:
          cpus: ${frontend.workload.cpu}
          memory: ${frontend.workload.memory}
      update_config:
        parallelism: ${frontend.workload.rolling-update-max-surge}
    environment:
      PORT: ${frontend.environment.PORT}
    healthcheck:
      disable: ${frontend.workload.liveness-probe-disable}
      interval: ${frontend.workload.liveness-probe-interval}
      retries: ${frontend.workload.liveness-probe-retries}
      start_period: ${frontend.workload.liveness-probe-initial-delay}
      test: ${frontend.workload.liveness-probe-command}
      timeout: ${frontend.workload.liveness-probe-timeout}
    image: ezodude/frontend-cok8s:dev
    networks:
      dev-esnet: null
    ports:
      - mode: ingress
        protocol: tcp
        published: 8080
        target: 8080
networks:
  dev-esnet:
    driver: bridge
    name: dev-esnet
volumes:
  redis_data:
    driver: local
    name: redis_data
